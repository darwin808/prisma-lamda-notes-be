generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id]) // renamed from `User` -> `author`
  authorId  Int     // relation scalar field
}

model Profile {
  id     Int     @default(autoincrement()) @id
  bio    String?
  userId Int     @unique  // relation scalar field
  user   User    @relation(fields: [userId], references: [id]) // renamed from `User` -> `user`
}

model User {
  id      Int      @default(autoincrement()) @id
  email   String   @unique
  name    String?
  posts   Post[]   // renamed from `Post` -> `posts`
  profile Profile? // renamed from `Profile` -> `profile`
}
model note_users {
  id Int @default(autoincrement()) @id
  username String @db.VarChar(255) 
  password String @db.VarChar(500) 
  email String @db.VarChar(255) @unique 
  posts note_posts[]
  profile note_user_profile? // renamed from `Profile` -> `profile`
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model note_posts {
  id Int @default(autoincrement()) @id
  title String 
  post String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note_users note_users @relation(fields: [user_id] , references: [id])
  user_id Int @unique
  media String[]
  like Int? @default(0)
  dislike Int? @default(0)
}
model note_user_profile {
  id     Int     @default(autoincrement()) @id
  bio    String?
  userId Int     @unique  // relation scalar field
  user   note_users    @relation(fields: [userId], references: [id]) // renamed from `User` -> `user`
}